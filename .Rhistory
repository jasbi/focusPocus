#Load experimental data
experimental_data <- tidy_data %>%
filter(!grepl("^Control", question))
experimental_data <- experimental_data %>%
separate(question, into = c("not", "conjunction", "animals", "stress_number"),
sep = "_", fill = "right")
experimental_data <- experimental_data %>%
mutate(not_conjunction = paste(not, conjunction, sep = "_"))
experimental_data <- experimental_data %>%
select(-not, -conjunction)
#write_csv(not_control_data, "not_control_data_separated.csv"
#create question groups
experimental_data <- experimental_data %>%
mutate(group_combined = case_when(
not_conjunction == "not_or" & stress_number %in% c(1, 2, 3) ~ "NOT_or",
not_conjunction == "not_or" & stress_number %in% c(101, 102, 103) ~ "not_OR",
not_conjunction == "not_and" & stress_number %in% c(1, 2, 3) ~ "NOT_and",
not_conjunction == "not_and" & stress_number %in% c(101, 102, 103) ~ "not_AND",
TRUE ~ not_conjunction
))
# Calculate proportions
data_summary <- not_control_data %>%
group_by(group_combined, response) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
# Create the stacked bar plot
ggplot(data_summary, aes(x = group_combined,
y = proportion,
fill = as.factor(response))) +
geom_bar(stat = "identity") +
labs(x = "Question Group",
y = "Proportion of Responses",
fill = "Response") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
control_data <- tidy_data %>%
filter(grepl("^Control", question))
control_plot <- control_data %>%
group_by(question, response) %>%
summarize(count = n(), .groups = "drop") %>%
mutate(proportion = count / sum(count)) %>%
ggplot(aes(x = question, y = proportion, fill = as.factor(response))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Control Questions",
x = "Question",
y = "Proportion of Responses",
fill = "Response") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(control_plot)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
tidy_data <- read_csv("tidydata.csv")
#extracting the data without the "control" suffix
#Load experimental data
experimental_data <- tidy_data %>%
filter(!grepl("^Control", question))
#separata the question names from their stress number.
#name example: not_and_eb_001, not_and_eb_101. The function below separates the name not_and_eb from the number.
#the number at the end of the name is the stress number. If the first number is zero (001), then "not"is stressed.
#if the first number is 1 (101), then the coordinating conjunction is stressed.
experimental_data <- experimental_data %>%
separate(question, into = c("not", "conjunction", "animals", "stress_number"),
sep = "_", fill = "right")
experimental_data <- experimental_data %>%
mutate(not_conjunction = paste(not, conjunction, sep = "_"))
experimental_data <- experimental_data %>%
select(-not, -conjunction)
#create question groups by the stress number.
experimental_data <- experimental_data %>%
mutate(group_combined = case_when(
not_conjunction == "not_or" & stress_number %in% c(1, 2, 3) ~ "NOT_or",
not_conjunction == "not_or" & stress_number %in% c(101, 102, 103) ~ "not_OR",
not_conjunction == "not_and" & stress_number %in% c(1, 2, 3) ~ "NOT_and",
not_conjunction == "not_and" & stress_number %in% c(101, 102, 103) ~ "not_AND",
TRUE ~ not_conjunction
))
# Calculate proportions
data_summary <- experimental_data %>%
group_by(group_combined, response) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
# Create the stacked bar plot
ggplot(data_summary, aes(x = group_combined,
y = proportion,
fill = as.factor(response))) +
geom_bar(stat = "identity") +
labs(x = "Question Group",
y = "Proportion of Responses",
fill = "Response") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
control_data <- tidy_data %>%
filter(grepl("^Control", question))
control_plot <- control_data %>%
group_by(question, response) %>%
summarize(count = n(), .groups = "drop") %>%
mutate(proportion = count / sum(count)) %>%
ggplot(aes(x = question, y = proportion, fill = as.factor(response))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Control Questions",
x = "Question",
y = "Proportion of Responses",
fill = "Response") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(control_plot)
library(tidyverse)
raw_data <- read_csv("toy_data.csv")
removed_data <-
raw_data[-c(1:2),] %>% #removing the first two rows
select(-StartDate, -EndDate, -Status, -IPAddress, -Progress, -RecordedDate, -RecipientLastName, -RecipientFirstName, -RecipientEmail, -ExternalReference, -LocationLatitude, -LocationLongitude) #removing colunns we don't need
excluded_data <-
removed_data %>%
filter(Finished==1) %>% # removing participants that did not finish the task
filter(DistributionChannel!="preview") %>% # removing trials that were preview trials
select(-Finished, -DistributionChannel)
exclusions <-
removed_data %>%
filter(Finished==0 | DistributionChannel=="preview") # removing participants that did not finish the task
tidy_data <-
excluded_data %>%
gather("question", "response", Control_no_animals_1:not_and_dc_102)
write_csv(tidy_data, "tidydata.csv")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
tidy_data <- read_csv("tidydata.csv")
#extracting the data without the "control" suffix
#Load experimental data
experimental_data <- tidy_data %>%
filter(!grepl("^Control", question))
#separata the question names from their stress number.
#name example: not_and_eb_001, not_and_eb_101. The function below separates the name not_and_eb from the number.
#the number at the end of the name is the stress number. If the first number is zero (001), then "not"is stressed.
#if the first number is 1 (101), then the coordinating conjunction is stressed.
experimental_data <- experimental_data %>%
separate(question, into = c("not", "conjunction", "animals", "stress_number"),
sep = "_", fill = "right")
experimental_data <- experimental_data %>%
mutate(not_conjunction = paste(not, conjunction, sep = "_"))
experimental_data <- experimental_data %>%
select(-not, -conjunction)
#create question groups by the stress number.
experimental_data <- experimental_data %>%
mutate(group_combined = case_when(
not_conjunction == "not_or" & stress_number %in% c(1, 2, 3) ~ "NOT_or",
not_conjunction == "not_or" & stress_number %in% c(101, 102, 103) ~ "not_OR",
not_conjunction == "not_and" & stress_number %in% c(1, 2, 3) ~ "NOT_and",
not_conjunction == "not_and" & stress_number %in% c(101, 102, 103) ~ "not_AND",
TRUE ~ not_conjunction
))
# Calculate proportions
data_summary <- experimental_data %>%
group_by(group_combined, response) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
# Create the stacked bar plot
ggplot(data_summary, aes(x = group_combined,
y = proportion,
fill = as.factor(response))) +
geom_bar(stat = "identity") +
labs(x = "Question Group",
y = "Proportion of Responses",
fill = "Response") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#creating the plot for the control data
control_data <- tidy_data %>%
filter(grepl("^Control", question))
control_plot <- control_data %>%
group_by(question, response) %>%
summarize(count = n(), .groups = "drop") %>%
mutate(proportion = count / sum(count)) %>%
ggplot(aes(x = question, y = proportion, fill = as.factor(response))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Control Questions",
x = "Question",
y = "Proportion of Responses",
fill = "Response") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(control_plot)
View(experimental_data)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
tidy_data <- read_csv("tidydata.csv")
#extracting the data without the "control" suffix
#Load experimental data
experimental_data <- tidy_data %>%
filter(!grepl("^Control", question))
#separata the question names from their stress number.
#name example: not_and_eb_001, not_and_eb_101. The function below separates the name not_and_eb from the number.
#the number at the end of the name is the stress number. If the first number is zero (001), then "not"is stressed.
#if the first number is 1 (101), then the coordinating conjunction is stressed.
experimental_data <- experimental_data %>%
separate(question, into = c("not", "conjunction", "animals", "stress_number"),
sep = "_", fill = "right")
experimental_data <- experimental_data %>%
mutate(not_conjunction = paste(not, conjunction, sep = "_"))
experimental_data <- experimental_data %>%
select(-not, -conjunction)
#create question groups by the stress number.
experimental_data <- experimental_data %>%
mutate(group_combined = case_when(
not_conjunction == "not_or" & stress_number %in% c(1, 2, 3) ~ "NOT_or",
not_conjunction == "not_or" & stress_number %in% c(101, 102, 103) ~ "not_OR",
not_conjunction == "not_and" & stress_number %in% c(1, 2, 3) ~ "NOT_and",
not_conjunction == "not_and" & stress_number %in% c(101, 102, 103) ~ "not_AND",
TRUE ~ not_conjunction
))
write_csv(tidy_data, "experimental_data.csv")
# Calculate proportions
data_summary <- experimental_data %>%
group_by(group_combined, response) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
# Create the stacked bar plot
ggplot(data_summary, aes(x = group_combined,
y = proportion,
fill = as.factor(response))) +
geom_bar(stat = "identity") +
labs(x = "Question Group",
y = "Proportion of Responses",
fill = "Response") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#creating the plot for the control data
control_data <- tidy_data %>%
filter(grepl("^Control", question))
control_plot <- control_data %>%
group_by(question, response) %>%
summarize(count = n(), .groups = "drop") %>%
mutate(proportion = count / sum(count)) %>%
ggplot(aes(x = question, y = proportion, fill = as.factor(response))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Control Questions",
x = "Question",
y = "Proportion of Responses",
fill = "Response") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(control_plot)
tidy_data <- read_csv("tidydata.csv")
tidy_data$response <- recode(tidy_data$response,
`1` = "animal 1",
`2` = "animal 2",
`3` = "no animal",
`4` = "both animals")
# Save the modified data to a new CSV file
write.csv(tidy_data, "/mnt/data/tidydata_modified.csv", row.names = FALSE)
tidy_data <- read_csv("tidydata.csv")
tidy_data$response <- recode(tidy_data$response,
`1` = "animal 1",
`2` = "animal 2",
`3` = "no animal",
`4` = "both animals")
# Save the modified data to a new CSV file
write.csv(tidy_data, "tidydata_modified.csv", row.names = FALSE)
# Print first few rows to check
head(tidy_data)
tidy_data <- read_csv("tidydata.csv", stringsAsFactors = FALSE)
tidy_data <- read_csv("tidydata.csv")
replace_numbers <- function(x) {
mapping <- c("1" = "animal 1", "2" = "animal 2", "3" = "no animal", "4" = "both animals")
# Split the values by comma or any separator, map them, and paste back together
x <- strsplit(x, ",\\s*")  # Split by comma and optional space
sapply(x, function(values) paste(mapping[values], collapse = ", "))
}
# Apply the function to the response column
tidy_data$response <- replace_numbers(df$response)
tidy_data <- read_csv("tidydata.csv")
replace_numbers <- function(x) {
mapping <- c("1" = "animal 1", "2" = "animal 2", "3" = "no animal", "4" = "both animals")
# Split the values by comma or any separator, map them, and paste back together
x <- strsplit(x, ",\\s*")  # Split by comma and optional space
sapply(x, function(values) paste(mapping[values], collapse = ", "))
}
# Apply the function to the response column
tidy_data$response <- replace_numbers(tidy_data$response)
tidy_data <- read_csv("tidydata.csv")
replace_numbers <- function(x) {
mapping <- c("1" = "animal 1", "2" = "animal 2", "3" = "no animal", "4" = "both animals")
# Ensure input is treated as character
x <- as.character(x)
# Split the values by comma or any separator, map them, and paste back together
x <- strsplit(x, ",\\s*")  # Split by comma and optional space
sapply(x, function(values) paste(mapping[values], collapse = ", "))
}
# Apply the function to the response column
tidy_data$response <- replace_numbers(tidy_data$response)
# Save the modified data to a new CSV file
write.csv(tidy_data, "tidydata_modified.csv", row.names = FALSE)
# Print first few rows to check
head(df)
tidy_data <- read_csv("tidydata.csv")
replace_numbers <- function(x) {
mapping <- c("1" = "animal 1", "2" = "animal 2", "3" = "no animal", "4" = "both animals")
# Ensure input is treated as character
x <- as.character(x)
# Split the values by comma or any separator, map them, and paste back together
x <- strsplit(x, ",\\s*")  # Split by comma and optional space
sapply(x, function(values) paste(mapping[values], collapse = ", "))
}
# Apply the function to the response column
tidy_data$response <- replace_numbers(tidy_data$response)
# Save the modified data to a new CSV file
write.csv(tidy_data, "tidydata_modified.csv", row.names = FALSE)
# Print first few rows to check
head(tidy_data)
tidy_data <- read_csv("tidydata.csv")
# Convert the response column to character (to avoid issues with numeric types)
tidy_data$response <- as.character(tidy_data$response)
# Extract all numeric values and join them with a separator (e.g., ", ")
tidy_data$response <- gsub("[^0-9,]", "", tidy_data$response)  # Remove any non-numeric characters except commas
# Save the cleaned-up file
write.csv(tidy_data, "tidydata_numeric.csv", row.names = FALSE)
# Print first few rows to check
head(tidy_data)
library(dplyr)
library(stringr)
tidy_data <- read_csv("tidydata.csv")
# Convert the response column to character
tidy_data$response <- as.character(tidy_data$response)
# Extract all numeric values and ensure they remain separated by a comma
tidy_data$response <- sapply(tidy_data$response, function(x) {
numbers <- unlist(str_extract_all(x, "\\d+"))  # Extract all numbers
paste(numbers, collapse = ", ")  # Join them with a comma and space
})
# Save the cleaned-up file
write.csv(tidy_data, "tidydata_numeric.csv", row.names = FALSE)
# Print first few rows to check
head(tidy_data)
# Load necessary libraries
library(dplyr)
library(stringr)
# Read the CSV file
tidy_data <- read.csv("tidydata_numeric.csv", stringsAsFactors = FALSE)
# Define mapping of numbers to text
mapping <- c("1" = "animal 1", "2" = "animal 2", "3" = "no animal", "4" = "both animals")
# Function to replace numbers with text
replace_numbers <- function(x) {
numbers <- unlist(str_extract_all(as.character(x), "\\d+"))  # Extract all numbers
if (length(numbers) > 0) {
return(paste(mapping[numbers], collapse = ", "))  # Replace and join with ", "
} else {
return(x)  # Return unchanged if no numbers found
}
}
# Apply the function to the response column
tidy_data$response <- sapply(tidy_data$response, replace_numbers)
# Save the modified data
write.csv(tidy_data, "tidydata_modified.csv", row.names = FALSE)
# Print first few rows to check
head(tidy_data)
# Load necessary libraries
library(dplyr)
library(stringr)
# Read the CSV file
tidy_data <- read.csv("tidydata.csv", stringsAsFactors = FALSE)
# Define mapping of numbers to text
mapping <- c("1" = "animal 1", "2" = "animal 2", "3" = "no animal", "4" = "both animals")
# Function to replace numbers with text
replace_numbers <- function(x) {
numbers <- unlist(str_extract_all(as.character(x), "\\d+"))  # Extract all numbers
if (length(numbers) > 0) {
return(paste(mapping[numbers], collapse = ", "))  # Replace and join with ", "
} else {
return(x)  # Return unchanged if no numbers found
}
}
# Apply the function to the response column
tidy_data$response <- sapply(tidy_data$response, replace_numbers)
# Save the modified data
write.csv(tidy_data, "tidydata_modified.csv", row.names = FALSE)
# Print first few rows to check
head(tidy_data)
#extracting the data without the "control" suffix
#Load experimental data
tidy_data <- read.csv("tidydata_modified.csv"
experimental_data <- tidy_data %>%
#extracting the data without the "control" suffix
#Load experimental data
modified_data <- read.csv("tidydata_modified.csv"
experimental_data <- modified_data %>%
#extracting the data without the "control" suffix
#Load experimental data
modified_data <- read.csv("tidydata_modified.csv")
experimental_data <- modified_data %>%
filter(!grepl("^Control", question))
#separata the question names from their stress number.
#name example: not_and_eb_001, not_and_eb_101. The function below separates the name not_and_eb from the number.
#the number at the end of the name is the stress number. If the first number is zero (001), then "not"is stressed.
#if the first number is 1 (101), then the coordinating conjunction is stressed.
experimental_data <- experimental_data %>%
separate(question, into = c("not", "conjunction", "animals", "stress_number"),
sep = "_", fill = "right")
experimental_data <- experimental_data %>%
mutate(not_conjunction = paste(not, conjunction, sep = "_"))
experimental_data <- experimental_data %>%
select(-not, -conjunction)
#create question groups by the stress number.
experimental_data <- experimental_data %>%
mutate(group_combined = case_when(
not_conjunction == "not_or" & stress_number %in% c(1, 2, 3) ~ "NOT_or",
not_conjunction == "not_or" & stress_number %in% c(101, 102, 103) ~ "not_OR",
not_conjunction == "not_and" & stress_number %in% c(1, 2, 3) ~ "NOT_and",
not_conjunction == "not_and" & stress_number %in% c(101, 102, 103) ~ "not_AND",
TRUE ~ not_conjunction
))
write_csv(tidy_data, "experimental_data.csv")
# Calculate proportions
data_summary <- experimental_data %>%
group_by(group_combined, response) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
# Create the stacked bar plot
ggplot(data_summary, aes(x = group_combined,
y = proportion,
fill = as.factor(response))) +
geom_bar(stat = "identity") +
labs(x = "Question Group",
y = "Proportion of Responses",
fill = "Response") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Read the CSV file
tidy_data <- read.csv("tidydata.csv", stringsAsFactors = FALSE)
# Define mapping of numbers to text
mapping <- c("1" = "animal 1", "2" = "animal 2", "3" = "no animal", "4" = "both animals")
# Function to replace numbers with text
replace_numbers <- function(x) {
numbers <- unlist(str_extract_all(as.character(x), "\\d+"))  # Extract all numbers
if (length(numbers) > 0) {
return(paste(mapping[numbers], collapse = ", "))  # Replace and join with ", "
} else {
return(x)  # Return unchanged if no numbers found
}
}
# Apply the function to the response column
tidy_data$response <- sapply(tidy_data$response, replace_numbers)
# Save the modified data
write.csv(tidy_data, "tidydata_modified.csv", row.names = FALSE)
# Print first few rows to check
head(tidy_data)
#creating the plot for the control data
control_data <- modified_data %>%
filter(grepl("^Control", question))
control_plot <- control_data %>%
group_by(question, response) %>%
summarize(count = n(), .groups = "drop") %>%
mutate(proportion = count / sum(count)) %>%
ggplot(aes(x = question, y = proportion, fill = as.factor(response))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Control Questions",
x = "Question",
y = "Proportion of Responses",
fill = "Response") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(control_plot)
#extracting the data without the "control" suffix
#Load experimental data from the modified tidy data.
modified_tidy_data <- read.csv("tidydata_modified.csv")
experimental_data <- modified_tidy_data %>%
filter(!grepl("^Control", question))
#separata the question names from their stress number.
#name example: not_and_eb_001, not_and_eb_101. The function below separates the name not_and_eb from the number.
#the number at the end of the name is the stress number. If the first number is zero (001), then "not"is stressed.
#if the first number is 1 (101), then the coordinating conjunction is stressed.
experimental_data <- experimental_data %>%
separate(question, into = c("not", "conjunction", "animals", "stress_number"),
sep = "_", fill = "right")
experimental_data <- experimental_data %>%
mutate(not_conjunction = paste(not, conjunction, sep = "_"))
experimental_data <- experimental_data %>%
select(-not, -conjunction)
#create question groups by the stress number.
experimental_data <- experimental_data %>%
mutate(group_combined = case_when(
not_conjunction == "not_or" & stress_number %in% c(1, 2, 3) ~ "NOT_or",
not_conjunction == "not_or" & stress_number %in% c(101, 102, 103) ~ "not_OR",
not_conjunction == "not_and" & stress_number %in% c(1, 2, 3) ~ "NOT_and",
not_conjunction == "not_and" & stress_number %in% c(101, 102, 103) ~ "not_AND",
TRUE ~ not_conjunction
))
write_csv(tidy_data, "experimental_data.csv")
# Calculate proportions
data_summary <- experimental_data %>%
group_by(group_combined, response) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count))
#write the data summary into a csv
write_csv(data_summary, "data_summary.csv")
# Create the stacked bar plot
ggplot(data_summary, aes(x = group_combined,
y = proportion,
fill = as.factor(response))) +
geom_bar(stat = "identity") +
labs(x = "Question Group",
y = "Proportion of Responses",
fill = "Response") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
